{"version":3,"sources":["function/1c/unique.js","components/Input/Input.tsx","components/Form/Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["exports","__esModule","x","Array","from","Set","Input","name","register","type","errors","customLabel","label","args","className","htmlFor","id","ref","placeholder","message","Form","useForm","handleSubmit","href","onSubmit","values","console","info","required","pattern","value","minLength","max","onClick","alert","App","unique","join","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8GACAA,EAAQC,YAAa,EAIrBD,EAAO,QAHP,SAAgBE,GACZ,OAAOC,MAAMC,KAAK,IAAIC,IAAIH,M,8MC0BdI,G,MAxBkB,SAAC,GAAiE,IAAhEC,EAA+D,EAA/DA,KAAMC,EAAyD,EAAzDA,SAAUC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,MAAUC,EAAU,yEACjG,OACE,oCACE,yBAAKC,UAAoB,aAATL,EAAsB,mBAAqB,WACvDG,GACA,2BAAOE,UAAW,QAASC,QAASR,GAAOK,GAE7C,yCACEI,GAAIT,EACJA,KAAMA,EACNO,UAAoB,aAATL,EAAsB,WAAa,QAC9CA,KAAMA,EACNQ,IAAKT,EACLU,YAAaX,GACTM,IAELF,GAAe,2BAAOG,UAAW,cAAeC,QAASR,GAAOI,IAElED,EAAQH,IAAS,0BAAMO,UAAW,SAAUJ,EAAQH,GAAMY,YC4ClDC,G,MA7DQ,WAAO,IAAD,EACgBC,YAAQ,IAA3CC,EADmB,EACnBA,aAAcd,EADK,EACLA,SAAUE,EADL,EACKA,OAKhC,OACE,yBAAKI,UAAW,gBACd,uBAAGA,UAAW,iBAAd,qBACA,uBAAGA,UAAW,kBAAmBS,KAAK,KAAtC,wBAGA,0BAAMT,UAAW,OAAQU,SAAUF,GAVtB,SAACG,GAChBC,QAAQC,KAAKF,OAUT,kBAAC,EAAD,CACElB,KAAM,yBACNE,KAAM,OACNG,MAAO,SACPF,OAAQA,EACRF,SAAUA,EAAS,CACjBoB,SAAU,WACVC,QAAS,CACPC,MAAO,4CACPX,QAAS,mBAIf,kBAAC,EAAD,CACEZ,KAAM,iFACNE,KAAM,WACNG,MAAO,WACPF,OAAQA,EACRF,SAAUA,EAAS,CACjBoB,SAAU,WACVG,UAAW,CACTD,MAAO,EACPX,QAAS,kBAEXa,IAAK,CACHF,MAAO,GACPX,QAAS,sBAIf,kBAAC,EAAD,CACEZ,KAAM,WACNE,KAAM,WACNE,YAAa,yCAAc,uBAAGY,KAAM,KAAT,uBAC3Bb,OAAQA,EACRF,SAAUA,EAAS,CACjBoB,SAAU,kBAGd,4BAAQd,UAAW,WAAYL,KAAK,UAApC,UAIF,uBAAGK,UAAW,aAAcS,KAAK,IAAIU,QAAS,kBAAMC,MAAM,yBAA1D,0B,gBC7CSC,G,MAXO,WACpB,OACE,oCACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,OAEF,2BAAIsB,IAAO,CAAC,EAAE,EAAE,EAAE,EAAE,IAAIC,KAAK,UCAfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cf1b402c.chunk.js","sourcesContent":["\"use strict\";\r\nexports.__esModule = true;\r\nfunction unique(x) {\r\n    return Array.from(new Set(x));\r\n}\r\nexports[\"default\"] = unique;\r\n","import React from 'react'\r\n\r\nimport { IInput } from '../../interfaces/interfaces'\r\nimport './Input.scss'\r\n\r\n  const Input: React.FC<IInput> = ({name, register, type, errors, customLabel, label, ...args}) => {\r\n  return (\r\n    <>\r\n      <div className={type === 'checkbox' ? 'content-checkbox' : 'content'}>\r\n        { label &&\r\n          <label className={'label'} htmlFor={name}>{label}</label>\r\n        }\r\n        <input\r\n          id={name}\r\n          name={name}\r\n          className={type === 'checkbox' ? 'checkbox' : 'input'}\r\n          type={type}\r\n          ref={register}\r\n          placeholder={name}\r\n          {...args}\r\n        />\r\n        {customLabel && <label className={'customLabel'} htmlFor={name}>{customLabel}</label>}\r\n      </div>\r\n      {errors![name] && <span className={'error'}>{errors![name].message}</span>}\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default  Input","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport Input from \"../Input/Input\";\r\nimport \"./form.scss\";\r\n\r\nconst Form: React.FC = () => {\r\n  const { handleSubmit, register, errors } = useForm({});\r\n  const onSubmit = (values: any) => {\r\n    console.info(values);\r\n  };\r\n\r\n  return (\r\n    <div className={\"wrapper-form\"}>\r\n      <p className={\"form__heading\"}>Log in to Example</p>\r\n      <a className={\"form__link-head\"} href=\"/\">\r\n        or create an account\r\n      </a>\r\n      <form className={\"form\"} onSubmit={handleSubmit(onSubmit)}>\r\n        <Input\r\n          name={\"e.g.john.doe@gmail.com\"}\r\n          type={\"text\"}\r\n          label={\"E-mail\"}\r\n          errors={errors}\r\n          register={register({\r\n            required: \"Required\",\r\n            pattern: {\r\n              value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\r\n              message: \"error email\"\r\n            }\r\n          })}\r\n        />\r\n        <Input\r\n          name={\"●●●●●●●●●●●●●\"}\r\n          type={\"password\"}\r\n          label={\"Password\"}\r\n          errors={errors}\r\n          register={register({\r\n            required: \"Required\",\r\n            minLength: {\r\n              value: 8,\r\n              message: \"error password\"\r\n            },\r\n            max: {\r\n              value: 20,\r\n              message: \"error password\"\r\n            }\r\n          })}\r\n        />\r\n        <Input\r\n          name={\"checkbox\"}\r\n          type={\"checkbox\"}\r\n          customLabel={<p>Agree with <a href={'/'}>Terms & Conditions</a></p>}\r\n          errors={errors}\r\n          register={register({\r\n            required: \"is required\"\r\n          })}\r\n        />\r\n        <button className={\"form-btn\"} type=\"submit\">\r\n          Login\r\n        </button>\r\n      </form>\r\n      <a className={\"form__link\"} href=\"/\" onClick={() => alert(\"it's not my problem\")}>Forgotten password?</a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\n\nimport Form from './components/Form/Form'\nimport unique from './function/1c/unique'\nimport './App.scss';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <div className=\"App\">\n        <Form />\n      </div>\n      <p>{unique([1,2,3,3,4]).join(', ')}</p>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}